/*
 * Copyright (C) 2016 - 2019  (See AUTHORS)
 *
 * This file is part of Owl.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Gradle IDEA project configuration stuff
// Partly from http://mrhaki.blogspot.com/2012/09/gradle-goodness-customize-idea-project.html and
// various SO posts

idea {
    project {
        vcs = 'Git'

        ipr {
            withXml { xmlProvider ->
                def projectXml = xmlProvider.asNode()
                customizeCodeStyle(projectXml, file("config/idea-codestyle.xml").getText("UTF-8"))
                customizeEncoding(projectXml)
            }
        }
    }

    module {
        name = 'owl'

        downloadJavadoc = true
        downloadSources = true
    }
}

// Helpers

/* Search component with given name */

static findComponent(node, name) {
    node.component.find { it.@name == name }
}

// Customizers

// http://stackoverflow.com/questions/26108228/pass-custom-code-style-xml-to-gradle-idea-plugin
static customizeCodeStyle(project, codeStyle) {
    project.appendNode('component', [name: 'ProjectCodeStyleSettingsManager'])
    def codeStyleNode = findComponent(project, 'ProjectCodeStyleSettingsManager')

    codeStyleNode.appendNode('option', [name: 'USE_PER_PROJECT_SETTINGS', value: 'true'])
    def projectSettingsNode = codeStyleNode.appendNode('option', [name: 'PER_PROJECT_SETTINGS'])
        .appendNode('value')

    def codeStyleXml = new XmlParser().parseText(codeStyle)
    codeStyleXml.children().each { option ->
        projectSettingsNode.append(option)
    }
}

static customizeEncoding(project) {
    def encoding = findComponent(project, 'Encoding')

    if (encoding) {
        // Change existing node.
        encoding.@useUTFGuessing = true
        encoding.@native2AsciiForPropertiesFiles = true
        encoding.@defaultCharsetForPropertiesFiles = 'UTF-8'
    } else {
        // Create new node with default values.
        project.appendNode 'Encoding',
            [useUTFGuessing                  : true,
             native2AsciiForPropertiesFiles  : true,
             defaultCharsetForPropertiesFiles: 'UTF-8']
    }
}