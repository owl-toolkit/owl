/*
 * Copyright (C) 2016  (See AUTHORS)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'application'
apply plugin: 'pmd'

project.group = 'de.tum.in'
project.version = '0.9.5'

mainClassName = 'enteEnteEnteEnteEnteGANS'

repositories {
    maven { url 'https://www7.in.tum.de/~sickert/maven/' }
    mavenCentral()
}

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    compile 'com.google.guava:guava:21.0-rc2'
    compile 'de.tum.in:owl-base:0.2.2'
    compile 'it.unimi.dsi:fastutil:7.0.13'
    compile files('lib/jhoafparser-1.1.1.jar')

    testCompile 'junit:junit:4+'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'com.google.code.findbugs:jsr305:3.0.1'

    // Additional Checks
    // findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:6.8.2'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

task createAllStartScripts() {
     // just a placeholder
}

def scripts = [
	'ltl2det':'translations.ltl2det.LTL2Det',
    'ltl2ldba':'translations.LTL2LDBA',
    'nba2ldba':'translations.NBA2LDBA',
    'ltl2parity':'translations.ltl2parity.LTL2Parity',
]

scripts.each() {scriptName, className -> 
    def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) 
    {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
    }
    createAllStartScripts.dependsOn(t)
}

distributions {
    main {
        baseName = 'translations'
        applicationName = 'translations'
    }
}

pmd {
    ruleSets = [
        "java-basic",
        "java-braces",
    ]
}

// If a user file is present, include it.
if (file('../user.gradle').exists()) {
    apply from: '../user.gradle'
}
