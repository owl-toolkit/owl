/*
 * Copyright (C) 2016 - 2021  (See AUTHORS)
 *
 * This file is part of Owl.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: 'antlr'

// The following static analysis plugins are currently disabled, since they
// take too much resources and have only limited benefit.
//
// apply plugin: 'checkstyle'
// apply plugin: 'pmd'
// apply plugin: 'errorprone'
// apply from:   'gradle/analysis.gradle'

// The IDEA import is currently not used anymore.
//
// apply plugin: 'idea'
// apply from:   'gradle/idea.gradle'

project.group = 'de.tum.in'
project.version = '22.0-development'

project.archivesBaseName = 'owl'
project.mainClassName = 'owl.command.OwlCommand'

java {
    toolchain {
        // JDK 17 is the latest release supported by GraalVM (native-image).
        languageVersion = JavaLanguageVersion.of(17)
    }

    withJavadocJar()
    withSourcesJar()
}

compileJava {
  options.compilerArgs << "-Xlint:cast"
  options.compilerArgs << "-Xlint:deprecation"
  options.compilerArgs << "-Xlint:divzero"
  options.compilerArgs << "-Xlint:empty"
  options.compilerArgs << "-Xlint:finally"
  options.compilerArgs << "-Xlint:overrides"
  // options.compilerArgs << "-Xlint:processing"
  options.compilerArgs << "-Xlint:try"
  // options.compilerArgs << "-Xlint:unchecked"
  options.compilerArgs << "-Xlint:varargs"
  options.compilerArgs << "-Werror"
}

jar {
    manifest {
        attributes(
            "Implementation-Title": "owl",
            "Main-Class": project.mainClassName,
            "Implementation-Version": project.version
        )
    }
}

def buildMarkdown = !DefaultNativePlatform.currentOperatingSystem.isWindows() && !project.hasProperty("disable-pandoc")
def staticNativeExecutable = project.hasProperty("static-native-executable")
def enableNativeAssertions = project.hasProperty("enable-native-assertions")

apply from: 'gradle/antlr.gradle'

repositories {
    mavenCentral()
}

dependencies {
    // https://github.com/google/guava
    implementation 'com.google.guava:guava:31.1-jre'

    // https://github.com/incaseoftrouble/jbdd
    implementation 'de.tum.in:jbdd:0.5.2'

    // http://www.antlr.org/
    // https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
    implementation 'org.antlr:antlr4-runtime:4.9.3'

    // https://www.graalvm.org/
    // https://mvnrepository.com/artifact/org.graalvm.sdk/graal-sdk
    implementation 'org.graalvm.sdk:graal-sdk:22.1.0'

    // https://github.com/google/gson
    testImplementation 'com.google.code.gson:gson:2.8.5'

    // https://github.com/junit-team/junit5/
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testRuntimeOnly    'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    antlr 'org.antlr:antlr4:4.9.3'
    // We remove unused runtime dependencies below.

    // https://mvnrepository.com/artifact/com.google.auto.value/auto-value
    implementation 'com.google.auto.value:auto-value-annotations:1.8.2'
    annotationProcessor 'com.google.auto.value:auto-value:1.8.2'
}

// Remove jars that are not used during runtime from classpath.
def unused = [[group: 'org.antlr', module: 'antlr4'],
              [group: 'org.antlr', module: 'antlr-runtime'],
              [group: 'org.antlr', module: 'ST4'],
              [group: 'org.abego.treelayout'],
              [group: 'org.glassfish'],
              [group: 'org.immutables', module: 'value'],
              [group: 'com.google.auto.value', module: 'auto-value-annotations'],
              [group: 'com.google.guava', module: 'listenablefuture'],
              [group: 'com.google.j2objc', module: 'j2objc-annotations']]
unused.each { unusedDependency ->
    configurations.runtimeClasspath.exclude unusedDependency
    configurations.testRuntimeClasspath.exclude unusedDependency
}

test {
    useJUnitPlatform {
        excludeTags 'size-regression-test', 'size-regression-train', 'size-report', 'performance'
    }
}

task sizeRegressionTest(type: Test) {
    useJUnitPlatform {
        includeTags 'size-regression-test'
    }
}

task sizeRegressionTrain(type: Test) {
    useJUnitPlatform {
        includeTags 'size-regression-train'
    }
}

task sizeReport(type: Test) {
    useJUnitPlatform {
        includeTags 'size-report'
    }
}

task performanceTest(type: Test) {
    useJUnitPlatform {
        includeTags 'performance'
    }
}

tasks.withType(Test) {
    maxHeapSize = "6G"
}

// ---------------- Native Compilation ----------------

task buildNativeLibrary(type: Exec, dependsOn: [jar]) {
    mkdir "${buildDir}/native-library"
    workingDir "${buildDir}/native-library"

    def graalHome = System.getenv("GRAAL_HOME")
    def command = (graalHome == null ? "" : graalHome + "/bin/") + "native-image";

    commandLine command,
        "owl.cinterface.CInterface", "libowl",
        "-cp", sourceSets.main.runtimeClasspath.asPath,
        enableNativeAssertions ? '-ea' : '-da',
        "-DowlHeader=${projectDir}/src/main/c/headers",
        '--shared',
        '--initialize-at-build-time',
        '--link-at-build-time=com.google,org.antlr,de.tum,owl',
        '--no-fallback',
        '--native-image-info',
        // (uncomment for performance analysis)
        // '-H:+PrintAnalysisCallTree',
        // '-H:DashboardDump=reports/graalvm-dashboard.dump',
        // '-H:+DashboardAll',
        '-H:+ReportExceptionStackTraces',
        // '-H:-UseServiceLoaderFeature',
        '-Djava.lang.Integer.IntegerCache.high=1024' // Cache more boxed integers.

    def cCompiler = System.getenv("CC")
    if (cCompiler != null) {
        args "-H:CCompilerPath=${cCompiler}"
    }
}

task buildNativeExecutable(type: Exec, dependsOn: [jar]) {
    mkdir "${buildDir}/native-executable"
    workingDir "${buildDir}/native-executable"

    def graalHome = System.getenv("GRAAL_HOME")
    def command = (graalHome == null ? "" : graalHome + "/bin/") + "native-image";

    // TODO: remove dependency on header files.
    commandLine command,
        "owl",
        "-jar", jar.archivePath,
        "-cp", sourceSets.main.runtimeClasspath.asPath,
        enableNativeAssertions ? '-ea' : '-da',
        "-DowlHeader=${projectDir}/src/main/c/headers",
        '--features=owl.command.OwlCommandRuntimeReflectionRegistrationFeature',
        '--initialize-at-build-time',
        '--link-at-build-time=com.google,org.antlr,de.tum,owl',
        '--no-fallback',
        '--native-image-info',
        // (uncomment for performance analysis)
        // '-H:+PrintAnalysisCallTree',
        // '-H:DashboardDump=reports/graalvm-dashboard.dump',
        // '-H:+DashboardAll',
        '-H:+ReportExceptionStackTraces',
        '-Djava.lang.Integer.IntegerCache.high=1024' // Cache more boxed integers.

    if (staticNativeExecutable) {
        args '--static'
        args '--libc=musl'

        def cCompiler = System.getenv("MUSL_CC")
        if (cCompiler != null) {
            args "-H:CCompilerPath=${cCompiler}"
        }
    } else {
        def cCompiler = System.getenv("CC")
        if (cCompiler != null) {
            args "-H:CCompilerPath=${cCompiler}"
        }
    }
}

// ---------------- Documentation ----------------

// Compile the markdown files
tasks.create(name: "compileMarkdown", type: Exec) {
    executable = 'scripts/render-markdown.sh'
    outputs.dir "$project.docsDir/markdown"
    args = ["$project.docsDir/markdown"]
}.onlyIf {
    buildMarkdown
}

javadoc {
    options.addBooleanOption('html5', true)
    options.setEncoding('UTF-8')
    options.links('https://docs.oracle.com/en/java/javase/17/docs/api')
    options.addStringOption('Xdoclint:none', '-quiet') // Silence warnings
}

// ---------------- Distributions ----------------

// Configure the distribution to include basic documentation.

distributions {
    main {
        distributionBaseName = 'owl-jre'

        contents {
            from "AUTHORS"
            from "LICENSE"
            from compileMarkdown

            into("bin") {
                from("scripts/rabinizer.sh")
            }

            into("jar") {
                from jar
                from javadocJar
                from sourcesJar
            }
        }
    }

    nativeImage {
        distributionBaseName = "owl-" +
          (DefaultNativePlatform.currentOperatingSystem.isMacOsX()
             ? "macos"
             : (DefaultNativePlatform.currentOperatingSystem.isLinux()
                ? (staticNativeExecutable
                  ? "linux-musl"
                  : "linux-glibc")
                : (DefaultNativePlatform.currentOperatingSystem.isWindows()
                  ? "windows"
                  : "unknown"))) + "-amd64"

        contents {
            from "AUTHORS"
            from "LICENSE"
            from compileMarkdown

            into("bin") {
                from "$buildDir/native-executable" include "owl"
            }

            into("bin") {
                from("scripts/rabinizer.sh")
            }

            into("lib") {
                from "$projectDir/src/main/headers"
                from "$buildDir/native-library" include "*.h"
                from "$buildDir/native-library" include "*.so"
                from "$buildDir/native-library" include "*.dylib"
            }

            into("jar") {
                from jar
                from javadocJar
                from sourcesJar
            }
        }
    }
}

tasks.getByPath(":nativeImageDistZip").dependsOn(tasks.getByPath(":buildNativeExecutable"))
tasks.getByPath(":nativeImageDistTar").dependsOn(tasks.getByPath(":buildNativeExecutable"))
tasks.getByPath(":nativeImageDistZip").dependsOn(tasks.getByPath(":buildNativeLibrary"))
tasks.getByPath(":nativeImageDistTar").dependsOn(tasks.getByPath(":buildNativeLibrary"))
