/*
 * Copyright (C) 2016  (See AUTHORS)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'idea'
apply plugin: 'application'

project.group = 'de.tum.in'
project.version = '1.0.0'

mainClassName = 'enteEnteEnteEnteEnteGANS'

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.1'
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'org.immutables:value:2.3.9'

    compile 'com.google.guava:guava:21.0'
    compile 'it.unimi.dsi:fastutil:7.0.13'
    compile files('lib/jhoafparser-1.1.1.jar')

    testCompile 'junit:junit:4+'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'com.google.code.findbugs:jsr305:3.0.1'

    // Additional Checks
    // findbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:6.8.2'
}

// Add resources directory for native libraries.
tasks.withType(Test) {
    systemProperty "java.library.path", "src/main/resources/"
}

idea {
    module {
        sourceDirs += file('src/main/generated')
        testSourceDirs += file('src/test/generated')
        //generatedSourceDirs += file('src/main/generated')

        jdkName = '1.8'

        downloadJavadoc = true
        downloadSources = true
    }
}

// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugs.html
findbugs {
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
    reportLevel = "low"
    ignoreFailures = true
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Pmd.html
pmd {
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("$project.rootDir/config/pmd-rules.xml")
    ruleSets = [] // We specify all rules in rules.xml
    consoleOutput = false
    ignoreFailures = true
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html
checkstyle {
    toolVersion = "7.4"
    configFile = file("$project.rootDir/config/checkstyle.xml")
    showViolations = false // Don't litter console
    checkstyleMain {
        configProperties = ['suppression-file':
                                    "$project.rootDir/config/checkstyle-main-suppression.xml"]
    }
    checkstyleTest {
        configProperties = ['suppression-file':
                                    "$project.rootDir/config/checkstyle-test-suppression.xml"]
    }
}

task createAllStartScripts() {
     // just a placeholder
}

def scripts = [
	'ltl2da':'owl.translations.LTL2DA',
    'ltl2dpa':'owl.translations.LTL2DPA',
    'ltl2ldba':'owl.translations.LTL2LDBA',
    'nba2ldba':'owl.translations.NBA2LDBA',
]

scripts.each() {scriptName, className ->
    def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts)
    {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    applicationDistribution.into("bin") {
        from(t)
        fileMode = 0755
    }
    createAllStartScripts.dependsOn(t)
}

distributions {
    main {
        baseName = 'owl'
    }
}

// If a user file is present, include it.
if (file('../user.gradle').exists()) {
    apply from: '../user.gradle'
}