/*
 * Copyright (C) 2016 - 2020  (See AUTHORS)
 *
 * This file is part of Owl.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    // https://github.com/tbroyer/gradle-errorprone-plugin
    // https://plugins.gradle.org/plugin/net.ltgt.errorprone
    // TODO: Reenable
    // id 'net.ltgt.errorprone' version '0.8.1'
}

// Languages
apply plugin: 'antlr'
apply plugin: 'java'

// Static Analysis
apply plugin: 'checkstyle'
apply plugin: 'pmd'

// IDE Support
apply plugin: 'application'
apply plugin: 'idea'

project.group = 'de.tum.in'
project.version = '21.??-development'

project.archivesBaseName = 'owl'
project.mainClassName = 'owl.run.DefaultCli'

def defaultEncoding = 'UTF-8'

tasks.withType(JavaCompile) {
    // GraalVM only supports JDK 11.
    options.release = 11

    // Linter
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
    // options.errorprone.disableWarningsInGeneratedCode = true

    // Encoding
    options.encoding = defaultEncoding
}

def buildMarkdown = !project.hasProperty("disable-pandoc")
def buildOwlNative = !project.hasProperty("disable-native")
def includeJar = !project.hasProperty("exclude-jar")
def enableNativeAssertions = project.hasProperty("enable-native-assertions")

if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    if (project.hasProperty("disable-default")) {
        project.logger.quiet("Running on windows, disable native compilations with -Pdisable-native -Pdisable-pandoc")
    } else {
        project.logger.quiet("Running on windows, disabling unsupported native compilations, specify -Pdisable-default to override")
        buildMarkdown = false;
        buildOwlNative = false;
    }
}


apply from: 'gradle/analysis.gradle'
apply from: 'gradle/antlr.gradle'

repositories {
    mavenCentral()
    jcenter() // required for naturals-util / roaring bitmap
}

dependencies {
    // https://github.com/google/guava
    implementation 'com.google.guava:guava:29.0-jre'

    // https://commons.apache.org/proper/commons-cli/
    implementation 'commons-cli:commons-cli:1.4'

    // https://github.com/incaseoftrouble/jbdd
    implementation 'de.tum.in:jbdd:0.5.2'

    // https://github.com/incaseoftrouble/naturals-util
    implementation 'de.tum.in:naturals-util:0.15.0'

    // https://github.com/vigna/fastutil
    // https://mvnrepository.com/artifact/it.unimi.dsi/fastutil
    implementation 'it.unimi.dsi:fastutil:8.3.1'

    // http://www.antlr.org/
    // https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
    implementation 'org.antlr:antlr4-runtime:4.8-1'

    // https://automata.tools/hoa/jhoafparser/
    implementation files('lib/jhoafparser-1.1.1-patched.jar')

    // https://www.graalvm.org/
    // https://mvnrepository.com/artifact/org.graalvm.sdk/graal-sdk
    implementation 'org.graalvm.sdk:graal-sdk:20.1.0'

    implementation group: 'com.zaxxer', name: 'SparseBitSet', version: '1.2'

    // https://github.com/google/gson
    testImplementation 'com.google.code.gson:gson:2.8.5'
    // https://github.com/junit-team/junit5/
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    antlr 'org.antlr:antlr4:4.8-1' // Introduces unused runtime dependencies; fixed in antlr.gradle

    // https://mvnrepository.com/artifact/com.google.errorprone/error_prone_core
    // TODO: Reenable
    // errorprone 'com.google.errorprone:error_prone_core:2.3.4'


    // https://mvnrepository.com/artifact/com.google.auto.value/auto-value
    implementation 'com.google.auto.value:auto-value-annotations:1.7.1'
    annotationProcessor 'com.google.auto.value:auto-value:1.7.1'
}

test {
    useJUnitPlatform {
        excludeTags 'size-regression-test', 'size-regression-train', 'size-report'
    }
}

task sizeRegressionTest(type: Test) {
    useJUnitPlatform {
        includeTags 'size-regression-test'
    }
}

task sizeRegressionTrain(type: Test) {
    useJUnitPlatform {
        includeTags 'size-regression-train'
    }
}

task sizeReport(type: Test) {
    useJUnitPlatform {
        includeTags 'size-report'
    }
}

tasks.withType(Test) {
    maxHeapSize = "16G"
}

// ---------------- Startup Scripts ----------------

// Create startup scripts for each tool
def scripts = [
    // LTL -> NBA
    'ltl2nba'   : 'owl.translations.modules.LTL2NBAModule',
    'ltl2ngba'  : 'owl.translations.modules.LTL2NGBAModule',

    // LTL -> LDBA
    'ltl2ldba'  : 'owl.translations.modules.LTL2LDBAModule',
    'ltl2ldgba' : 'owl.translations.modules.LTL2LDGBAModule',

    // LTL -> DRA
    'ltl2dra'   : 'owl.translations.modules.LTL2DRAModule',
    'ltl2dgra'  : 'owl.translations.modules.LTL2DGRAModule',

    // LTL -> DPA
    'ltl2dpa'   : 'owl.translations.modules.LTL2DPAModule',

    // LTL -> DELA
    'delag'     : 'owl.translations.delag.DelagBuilder',

    // LTL -> **A
    'ltl2da'    : 'owl.translations.modules.LTL2DAModule',
    'ltl2na'    : 'owl.translations.modules.LTL2NAModule',

    // NBA -> DPA
    'nbadet'    : 'owl.translations.nbadet.NbaDet',

    // Miscellaneous
    'nbasim'    : 'owl.automaton.algorithm.simulations.BuchiSimulation',
    'nba2dpa'   : 'owl.translations.nba2dpa.NBA2DPA',
    'nba2ldba'  : 'owl.translations.nba2ldba.NBA2LDBA',
    'dra2dpa'   : 'owl.translations.dra2dpa.IARBuilder',

    'owl-server': 'owl.run.ServerCli'
]

ext.createStartScriptTasks = { name, cp, map ->
    map.collect { scriptName, className ->
        tasks.create(name: scriptName + name.capitalize() + 'StartScript', type: CreateStartScripts) {
            group 'build scripts'
            mainClassName = className
            applicationName = scriptName
            // CreateStartScripts is stupid; it.outputs.files = outputDir, not the created scripts.
            outputDir = file(project.buildDir.path + '/scripts/' + scriptName)
            classpath = cp
        }
    }
}

startScripts.outputDir = file(project.buildDir.path + '/scripts/owl')

// ---------------- Jars ----------------

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes(
            "Implementation-Title": "owl",
            "Main-Class": project.mainClassName,
            "Implementation-Version": project.version)
    }
}

task buildNativeLibrary(type: Exec, dependsOn: [jar]) {
    mkdir "${buildDir}/native-library"
    workingDir "${buildDir}/native-library"
    onlyIf { buildOwlNative }

    def graalHome = System.getenv("GRAAL_HOME")
    def command = (graalHome == null ? "" : graalHome + "/bin/") + "native-image";

    commandLine command,
        "owl.cinterface.CInterface", "libowl",
        "-cp", sourceSets.main.runtimeClasspath.asPath,
        enableNativeAssertions ? '-ea' : '-da',
        "-DowlHeader=${projectDir}/src/main/c/headers",
        '--shared',
        '--initialize-at-build-time=owl,it,com,org,jhoafparser',
        '--no-fallback',
        '--no-server',
        '-H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy$BySpaceAndTime',
        '-H:+PrintAnalysisCallTree',
        '-H:+ReportExceptionStackTraces',
        '-H:-UseServiceLoaderFeature'
}

task buildNativeExecutable(type: Exec, dependsOn: [jar]) {
    mkdir "${buildDir}/native-executable"
    workingDir "${buildDir}/native-executable"
    onlyIf { buildOwlNative }

    def graalHome = System.getenv("GRAAL_HOME")
    def command = (graalHome == null ? "" : graalHome + "/bin/") + "native-image";

    // TODO: remove dependency on header files.
    commandLine command,
        "owl-native",
        "-jar", jar.archivePath,
        "-cp", sourceSets.main.runtimeClasspath.asPath,
        enableNativeAssertions ? '-ea' : '-da',
        "-DowlHeader=${projectDir}/src/main/c/headers",
        '--initialize-at-build-time=owl,it,com,org,jhoafparser',
        '--no-fallback',
        '--no-server',
        '-H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy$BySpaceAndTime',
        '-H:+PrintAnalysisCallTree',
        '-H:+ReportExceptionStackTraces',
        '-H:-UseServiceLoaderFeature'
}

// ---------------- Script Jobs ----------------

def otherStartScripts = createStartScriptTasks("", jar.outputs.files + project.getConfigurations().getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME), scripts)
otherStartScripts.each() {
    it.dependsOn(jar)
}

// ---------------- Documentation ----------------

// Compile the markdown files
tasks.create(name: "compileMarkdown", type: Exec) {
    executable = 'scripts/render-markdown.sh'
    outputs.dir "$project.docsDir/markdown"
    args = ["$project.docsDir/markdown"]
}.onlyIf {
    buildMarkdown
}

javadoc {
    options.addBooleanOption('html5', true)
    options.setEncoding(defaultEncoding)
    options.links('https://docs.oracle.com/en/java/javase/11/docs/api')
    options.addStringOption('Xdoclint:none', '-quiet') // Silence warnings
}

// TODO Include testing framework scripts in distribution -> split scripts directory in two dirs

// ---------------- Distributions ----------------

// Configure the distribution to include basic documentation.

distributions {
    main {
        distributionBaseName = 'owl'

        contents {
            from "AUTHORS"
            from "LICENSE"
            from compileMarkdown

            into("bin") {
                from otherStartScripts
                fileMode = 0755
            }

            if (buildOwlNative) {
                into("clib") {
                    from "$projectDir/src/main/headers"
                    from "$buildDir/native-library" include "*.h"
                    from "$buildDir/native-library" include "*.so"
                }

                into("bin") {
                    from "$buildDir/native-executable" include "owl-native"
                }
            }

            if (includeJar) {
                into("jars") {
                    from jar
                    from javadocJar
                    from sourcesJar
                }
            }
        }
    }
}

task localEnvironment(type: Copy) {
    destinationDir = project.buildDir
    dependsOn(tasks.getByPath(":buildNativeLibrary"))
    dependsOn(tasks.getByPath(":buildNativeExecutable"))

    into("bin") {
        from startScripts
        from otherStartScripts
        fileMode = 0755
    }

    into("lib") {
        from configurations.default
        from jar
    }

    if (buildOwlNative) {
        into("clib") {
            from "$projectDir/src/main/headers"
            from "$buildDir/native-library" include "*.h"
            from "$buildDir/native-library" include "*.so"
        }

        into("bin") {
            from "$buildDir/native-executable" include "owl-native"
        }
    }
}


tasks.getByPath(":distZip").dependsOn(tasks.getByPath(":buildNativeExecutable"))
tasks.getByPath(":distTar").dependsOn(tasks.getByPath(":buildNativeExecutable"))
tasks.getByPath(":distZip").dependsOn(tasks.getByPath(":buildNativeLibrary"))
tasks.getByPath(":distTar").dependsOn(tasks.getByPath(":buildNativeLibrary"))


apply from: 'gradle/idea.gradle'
