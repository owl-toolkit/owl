/*
 * Copyright (C) 2016 - 2018  (See AUTHORS)
 *
 * This file is part of Owl.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        flatDir dirs: 'lib/', name: 'proguard.jar'
    }

    dependencies {
        classpath ':proguard:'
    }
}

plugins {
    // https://github.com/tbroyer/gradle-apt-plugin
    // https://plugins.gradle.org/plugin/net.ltgt.apt
    id 'net.ltgt.apt' version '0.17'
    id 'net.ltgt.apt-idea' version '0.17'

    // https://github.com/tbroyer/gradle-errorprone-javacplugin-plugin
    // https://plugins.gradle.org/plugin/net.ltgt.errorprone-javacplugin
    id 'net.ltgt.errorprone-javacplugin' version '0.2'
}

// Languages
apply plugin: 'antlr'
apply plugin: 'c'
apply plugin: 'cpp'
apply plugin: 'java'

// Static Analysis
apply plugin: 'pmd'
apply plugin: 'checkstyle'

// IDE Support
apply plugin: 'idea'
apply plugin: 'application'

project.group = 'de.tum.in'
project.version = '18.10-snapshot'

project.archivesBaseName = 'owl'
project.mainClassName = 'owl.run.DefaultCli'
project.sourceCompatibility = JavaVersion.VERSION_1_10
project.targetCompatibility = JavaVersion.VERSION_1_10

def defaultEncoding = 'UTF-8'

tasks.withType(JavaCompile) { options.encoding = defaultEncoding }
tasks.withType(Javadoc) { options.encoding = defaultEncoding }

def buildNatives = !project.hasProperty("disable-native")

apply from: 'gradle/analysis.gradle'
apply from: 'gradle/antlr.gradle'
apply from: 'gradle/natives.gradle'

repositories {
    mavenCentral()
}

dependencies {
    // https://github.com/google/gson    
    implementation 'com.google.code.gson:gson:2.8.5'
    // https://github.com/google/guava
    implementation 'com.google.guava:guava:26.0-jre'
    // https://commons.apache.org/proper/commons-cli/
    implementation 'commons-cli:commons-cli:1.4'
    // https://github.com/incaseoftrouble/jbdd
    implementation 'de.tum.in:jbdd:0.3.2'
    // https://github.com/incaseoftrouble/naturals-util
    implementation 'de.tum.in:naturals-util:0.10.0'
    // https://github.com/vigna/fastutil
    implementation 'it.unimi.dsi:fastutil:8.2.1'
    // http://www.antlr.org/
    implementation 'org.antlr:antlr4-runtime:4.7.1'
    // https://immutables.github.io/
    implementation 'org.immutables:value:2.7.1:annotations'
    // https://automata.tools/hoa/jhoafparser/
    implementation files('lib/jhoafparser-1.1.1-patched.jar')

    // https://github.com/junit-team/junit5/
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.3.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.3.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.3.0")
    
    antlr 'org.antlr:antlr4:4.7.1' // Introduces unused runtime dependencies; fixed in antlr.gradle
    errorprone 'com.google.errorprone:error_prone_core:2.3.1'
    annotationProcessor 'org.immutables:value:2.7.1'
}

test {
    useJUnitPlatform()
}

// ---------------- Startup Scripts ----------------

// Create startup scripts for each tool
def scripts = [
    // LTL -> LDBA
    'ltl2ldba'  : 'owl.translations.ltl2ldba.LTL2LDBAModule',
    'ltl2ldgba' : 'owl.translations.ltl2ldba.LTL2LDGBAModule',

    // LTL -> DRA
    'ltl2dra'   : 'owl.translations.rabinizer.RabinizerDegeneralizeMain',
    'ltl2dgra'  : 'owl.translations.rabinizer.RabinizerMain',

    // LTL -> DPA
    'ltl2dpa'   : 'owl.translations.LTL2DPA',
    'fgx2dpa'   : 'owl.translations.fgx2dpa.FGX2DPA',

    // LTL -> DELA
    'delag'     : 'owl.translations.delag.DelagBuilder',

    // LTL -> D*A
    // TODO: Deprecate and replace by delag!
    'ltl2da'    : 'owl.translations.LTL2DAModule',

    // Miscellaneous
    'synth'     : 'owl.translations.Synthesis',
    'nba2dpa'   : 'owl.translations.nba2dpa.NBA2DPA',
    'nba2ldba'  : 'owl.translations.nba2ldba.NBA2LDBA',
    'dra2dpa'   : 'owl.translations.dra2dpa.IARBuilder',
    'owl-server': 'owl.run.ServerCli'
]

def rabinizerScripts = [
    // LTL -> LDBA
    'ltl2ldba'  : 'owl.translations.ltl2ldba.LTL2LDBAModule',
    'ltl2ldgba' : 'owl.translations.ltl2ldba.LTL2LDGBAModule',

    // LTL -> DRA
    'ltl2dra'   : 'owl.translations.rabinizer.RabinizerDegeneralizeMain',
    'ltl2dgra'  : 'owl.translations.rabinizer.RabinizerMain',

    // LTL -> DPA
    'ltl2dpa'   : 'owl.translations.LTL2DPA',

    // DRA -> DPA
    'dra2dpa'   : 'owl.translations.dra2dpa.IARBuilder'
]

ext.createStartScriptTasks = { name, cp, map ->
    map.collect { scriptName, className ->
        tasks.create(name: scriptName + name.capitalize() + 'StartScript', type: CreateStartScripts) {
            group 'build scripts'
            mainClassName = className
            applicationName = scriptName
            // CreateStartScripts is stupid; it.outputs.files = outputDir, not the created scripts.
            outputDir = new File(project.buildDir, 'scripts/' + scriptName)
            classpath = cp
        }
    }
}

startScripts.outputDir = new File(project.buildDir, 'scripts/owl')

// ---------------- Jars ----------------

jar {
    manifest {
        attributes(
            "Implementation-Title": "owl",
            "Main-Class": project.mainClassName,
            "Implementation-Version": project.version)
    }
}

ext.createProGuardTask = { name ->
    tasks.create(name: name, type: proguard.gradle.ProGuardTask) {
        group 'build'

        dontobfuscate

        optimizationpasses 10
        allowaccessmodification

        dontwarn 'com.oracle.jmc.**'
        dontwarn 'org.immutables.**'
        dontwarn 'afu.org.checkerframework.**'
        dontwarn 'org.checkerframework.**'

        keepclassmembers "enum * { \
            <fields>; \
            public static **[] values(); \
            public static ** valueOf(java.lang.String); \
        }"

        libraryjars "${System.getProperty('java.home')}/jmods"
        libraryjars "${System.getProperty('java.home')}/lib"

        injars configurations.findByName('runtimeClasspath').getFiles(),
            filter: '!META-INF/**,**.class'
        injars files(jar)
    }
}

def shadedJar = createProGuardTask("shadedJar").configure {
    optimizations '!code/allocation/variable,!class/merging/*,!field/removal/writeonly'

    keep "class " + project.mainClassName + " { public static void main(java.lang.String[]); }"
    scripts.forEach { _, value ->
        it.keep "class " + value + " { public static void main(java.lang.String[]); }"
    }
    outjars( new File(project.buildDir, 'libs/owl.jar'))
}

def rabinizerJar = createProGuardTask("rabinizerJar").configure {
    optimizations '!code/allocation/variable,!class/merging/*,!field/removal/writeonly'

    rabinizerScripts.forEach { _, value ->
        it.keep "class " + value + " { public static void main(java.lang.String[]); }"
    }
    outjars new File(project.buildDir, 'libs/rabinizer.jar')
}

createProGuardTask("cppJar").configure {
    optimizationpasses 20
    optimizations '!code/allocation/variable,!class/merging/*,' +
        '!field/removal/writeonly,!method/inlining/unique,*'

    keep "@interface owl.util.annotation.CEntryPoint"
    keepclasseswithmembers "class * { \
        @owl.util.annotation.CEntryPoint <methods>; \
    }"

    assumenosideeffects "class java.util.Logging { \
        public void log(***); \
        public void entering(***); \
        public void exiting(***); \
        public void throwing(***); \
        \
        public void finest(***); \
        public void finer(***); \
        public void fine(***); \
        public void info(***); \
        public void warning(***); \
        public void severe(***); \
        public void config(***); \
        \
        public void logp(***); \
        public void logrb(***); \
        \
        public boolean isLoggable(***); \
        \
        public static java.util.Logger getLogger(***); \
        public static java.util.Logger getGlobal(); \
    }"
    assumenoexternalsideeffects "class java.lang.StringBuilder { \
        public java.lang.StringBuilder(); \
        public java.lang.StringBuilder(int); \
        public java.lang.StringBuilder(java.lang.String); \
        public java.lang.StringBuilder append(***); \
        public java.lang.String toString(); \
    }"

    assumenoexternalreturnvalues "public final class java.lang.StringBuilder { \
        public java.lang.StringBuilder append(***); \
    }"

    verbose // Run gradle with --info to see info

    outjars( new File(project.buildDir, 'libs/owl-cpp.jar'))
}

// ---------------- Script Jobs ----------------

def allStartScripts = createStartScriptTasks("", jar.outputs.files + project.configurations.runtime, scripts)
allStartScripts.each() {
    it.dependsOn(jar)
    startScripts.dependsOn(it)
}

def shadedJarStartScripts = createStartScriptTasks("ProGuard", shadedJar.outputs.files, scripts + ['owl': mainClassName])
shadedJarStartScripts.each() {
    it.dependsOn(shadedJar)
}

def rabinizerStartScripts = createStartScriptTasks("Rabinizer", rabinizerJar.outputs.files, rabinizerScripts)
rabinizerStartScripts.each() {
    it.dependsOn(rabinizerJar)
}

// ---------------- Documentation ----------------

// Compile the markdown files
tasks.create(name: "compileMarkdown", type: Exec) {
    executable = 'scripts/render-markdown.sh'
    outputs.dir "$project.docsDir/markdown"
    args = ["$project.docsDir/markdown"]
}.onlyIf {
    buildNatives
}

javadoc {
    options.addBooleanOption('html5', true)
    options.setEncoding(defaultEncoding)
    options.links('https://docs.oracle.com/javase/10/docs/api')
}

// TODO Include testing framework scripts in distribution -> split scripts directory in two dirs


// ---------------- Distributions ----------------

// Configure the distribution to include basic documentation.
// Javadoc is excluded and can be built from source release,
// that is generated from the release tag.

distributions {
    main {
        baseName = 'owl'

        contents {
            from "AUTHORS"
            from "LICENSE"
            from compileMarkdown

            into("bin") {
                from allStartScripts

                if (buildNatives) {
                    from 'build/exe/owlClient/owl-client'
                }

                fileMode = 0755
            }

            into("javadoc") {
                from javadoc
            }
        }
    }

    minimized {
        baseName = 'owl-minimized'

        contents {
            from "AUTHORS"
            from "LICENSE"

            into("bin") {
                from shadedJarStartScripts

                if (buildNatives) {
                    from 'build/exe/owlClient/owl-client'
                }

                fileMode = 0755
            }

            into("lib") {
                from shadedJar
            }
        }
    }

    rabinizer {
        baseName = 'rabinizer'

        contents {
            from "AUTHORS"
            from "LICENSE"

            into("bin") {
                from rabinizerStartScripts
                fileMode = 0755
            }

            into("lib") {
                from rabinizerJar
            }
        }
    }
}

if (buildNatives) {
    tasks.getByPath(":distZip").dependsOn(tasks.getByPath(":owlClientExecutable"))
    tasks.getByPath(":distTar").dependsOn(tasks.getByPath(":owlClientExecutable"))
    tasks.getByPath(":minimizedDistZip").dependsOn(tasks.getByPath(":owlClientExecutable"))
    tasks.getByPath(":minimizedDistTar").dependsOn(tasks.getByPath(":owlClientExecutable"))
}

apply from: 'gradle/idea.gradle'