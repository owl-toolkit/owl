/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package ltl.parser;

import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;
import ltl.*;
import ltl.tlsf.*;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;

@SuppressWarnings("all")
public class Parser implements ParserConstants {
    public BiMap<String, Integer> map = HashBiMap.create();

    public static Formula formula(String s) {
        return formula(s, null);
    }

    public static Formula formula(String s, BiMap<String, Integer> mapping) {
        Parser parser = new Parser(new StringReader(s));

        if (mapping != null) {
            parser.map = mapping;
        }

        try {
            return parser.formula();
        } catch (ParseException e) {
            throw new RuntimeException(e);
        }
    }

  final public TLSF tlsf() throws ParseException {ImmutableTLSF.Builder builder = ImmutableTLSF.builder();
    String string;
    BitSet inputs = new BitSet();
    BitSet outputs = new BitSet();
    Collection<Formula> elements = new ArrayList<Formula>();
    Formula formula;
    map = HashBiMap.create();
    jj_consume_token(INFO);
    jj_consume_token(LCPAR);
    jj_consume_token(TITLE);
    string = string();
builder.title(string);
    jj_consume_token(DESCRIPTION);
    string = string();
builder.description(string);
    jj_consume_token(SEMANTICS);
    if (jj_2_1(2)) {
      jj_consume_token(MEALY);
builder.semantics(TLSF.Semantics.MEALY);
    } else if (jj_2_2(2)) {
      jj_consume_token(MOORE);
builder.semantics(TLSF.Semantics.MOORE);
    } else if (jj_2_3(2)) {
      jj_consume_token(MEALYSTRICT);
builder.semantics(TLSF.Semantics.MEALY_STRICT);
    } else if (jj_2_4(2)) {
      jj_consume_token(MOORESTRICT);
builder.semantics(TLSF.Semantics.MOORE_STRICT);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(TARGET);
    if (jj_2_5(2)) {
      jj_consume_token(MEALY);
builder.target(TLSF.Semantics.MEALY);
    } else if (jj_2_6(2)) {
      jj_consume_token(MOORE);
builder.target(TLSF.Semantics.MOORE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RCPAR);
    jj_consume_token(MAIN);
    jj_consume_token(LCPAR);
    jj_consume_token(INPUTS);
    jj_consume_token(LCPAR);
    label_1:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_1;
      }
      string = jj_consume_token(ID).image;
      jj_consume_token(SEMIC);
int id = map.size();
                map.put(string, id);
                inputs.set(id);
    }
    jj_consume_token(RCPAR);
    jj_consume_token(OUTPUTS);
    jj_consume_token(LCPAR);
    label_2:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_2;
      }
      string = jj_consume_token(ID).image;
      jj_consume_token(SEMIC);
int id = map.size();
                map.put(string, id);
                outputs.set(id);
    }
    jj_consume_token(RCPAR);
    label_3:
    while (true) {
      if (jj_2_15(2)) {
        jj_consume_token(INITIALLY);
        jj_consume_token(LCPAR);
        label_4:
        while (true) {
          if (jj_2_9(2)) {
            ;
          } else {
            break label_4;
          }
          formula = formulaEmbedded();
elements.add(formula);
        }
builder.initially(Conjunction.create(elements.stream()));
                elements.clear();
        jj_consume_token(RCPAR);
      } else if (jj_2_16(2)) {
        jj_consume_token(PRESET);
        jj_consume_token(LCPAR);
        label_5:
        while (true) {
          if (jj_2_10(2)) {
            ;
          } else {
            break label_5;
          }
          formula = formulaEmbedded();
elements.add(formula);
        }
builder.preset(Conjunction.create(elements.stream()));
                elements.clear();
        jj_consume_token(RCPAR);
      } else if (jj_2_17(2)) {
        jj_consume_token(REQUIRE);
        jj_consume_token(LCPAR);
        label_6:
        while (true) {
          if (jj_2_11(2)) {
            ;
          } else {
            break label_6;
          }
          formula = formulaEmbedded();
elements.add(formula);
        }
builder.require(Conjunction.create(elements.stream()));
                elements.clear();
        jj_consume_token(RCPAR);
      } else if (jj_2_18(2)) {
        jj_consume_token(ASSERT);
        jj_consume_token(LCPAR);
        label_7:
        while (true) {
          if (jj_2_12(2)) {
            ;
          } else {
            break label_7;
          }
          formula = formulaEmbedded();
elements.add(formula);
        }
builder.assert_(Conjunction.create(elements.stream()));
                elements.clear();
        jj_consume_token(RCPAR);
      } else if (jj_2_19(2)) {
        jj_consume_token(ASSUME);
        jj_consume_token(LCPAR);
        label_8:
        while (true) {
          if (jj_2_13(2)) {
            ;
          } else {
            break label_8;
          }
          formula = formulaEmbedded();
elements.add(formula);
        }
builder.assume(Conjunction.create(elements.stream()));
                elements.clear();
        jj_consume_token(RCPAR);
      } else if (jj_2_20(2)) {
        jj_consume_token(GUARANTEE);
        jj_consume_token(LCPAR);
        label_9:
        while (true) {
          if (jj_2_14(2)) {
            ;
          } else {
            break label_9;
          }
          formula = formulaEmbedded();
elements.add(formula);
        }
builder.guarantee(Conjunction.create(elements.stream()));
                elements.clear();
        jj_consume_token(RCPAR);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_21(2)) {
        ;
      } else {
        break label_3;
      }
    }
    jj_consume_token(RCPAR);
builder.inputs(inputs);
        builder.outputs(outputs);
        builder.mapping(map);
        {if ("" != null) return builder.build();}
    throw new Error("Missing return statement in function");
  }

  final public Formula formulaEmbedded() throws ParseException {Formula f;
    f = disjunction();
    jj_consume_token(SEMIC);
{if ("" != null) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Formula formula() throws ParseException {Formula f;
    f = disjunction();
    jj_consume_token(0);
{if ("" != null) return f;}
    throw new Error("Missing return statement in function");
  }

  final public Formula disjunction() throws ParseException {Formula left, right;
    left = conjunction();
    label_10:
    while (true) {
      if (jj_2_22(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(OR);
      right = conjunction();
left = Disjunction.create(left, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Formula conjunction() throws ParseException {Formula left, right;
    left = binaryOp();
    label_11:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(AND);
      right = binaryOp();
left = Conjunction.create(left, right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Formula binaryOp() throws ParseException {Formula left;
    Formula right;
    left = unaryOp();
    if (jj_2_30(2)) {
      if (jj_2_24(2)) {
        jj_consume_token(IMP);
        right = unaryOp();
left = Disjunction.create(left.not(), right);
      } else if (jj_2_25(2)) {
        jj_consume_token(BIIMP);
        right = unaryOp();
left = Conjunction.create(Disjunction.create(left.not(), right), Disjunction.create(left, right.not()));
      } else if (jj_2_26(2)) {
        jj_consume_token(UOP);
        right = unaryOp();
left = new UOperator(left, right);
      } else if (jj_2_27(2)) {
        jj_consume_token(ROP);
        right = unaryOp();
left = UOperator.create(left.not(), right.not()).not();
      } else if (jj_2_28(2)) {
        jj_consume_token(VOP);
        right = unaryOp();
left = UOperator.create(left.not(), right.not()).not();
      } else if (jj_2_29(2)) {
        jj_consume_token(WOP);
        right = unaryOp();
left = new Disjunction(new UOperator(left, right), new GOperator(left));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Formula unaryOp() throws ParseException {Formula f;
    if (jj_2_31(2)) {
      jj_consume_token(FOP);
      f = unaryOp();
{if ("" != null) return new FOperator(f);}
    } else if (jj_2_32(2)) {
      jj_consume_token(GOP);
{if ("" != null) return GFormula();}
    } else if (jj_2_33(2)) {
      jj_consume_token(XOP);
      f = unaryOp();
{if ("" != null) return new XOperator(f);}
    } else if (jj_2_34(2)) {
      jj_consume_token(NEG);
      f = unaryOp();
{if ("" != null) return f.not();}
    } else if (jj_2_35(2)) {
      f = atom();
{if ("" != null) return f;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Formula GFormula() throws ParseException {Formula f;
    String number;
    CompOperator op;
    Lim limes;
    if (jj_2_38(2)) {
      jj_consume_token(LCPAR);
      if (jj_2_37(2)) {
        jj_consume_token(SUP);
limes = Lim.SUP;
      } else {
        if (jj_2_36(2)) {
          jj_consume_token(INF);
        } else {
          ;
        }
limes = Lim.INF;
      }
      op = comp();
      number = jj_consume_token(NUMBER).image;
      jj_consume_token(RCPAR);
      f = unaryOp();
{if ("" != null) return FrequencyG.createForPRISM(f, Double.parseDouble(number), op, limes);}
    } else if (jj_2_39(2)) {
      f = unaryOp();
{if ("" != null) return new GOperator(f);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Formula atom() throws ParseException {String atomString;
    Formula f;
    if (jj_2_40(2)) {
      jj_consume_token(TRUE);
{if ("" != null) return BooleanConstant.TRUE;}
    } else if (jj_2_41(2)) {
      jj_consume_token(FALSE);
{if ("" != null) return BooleanConstant.FALSE;}
    } else if (jj_2_42(2)) {
      atomString = jj_consume_token(ID).image;
if (!map.containsKey(atomString)) {
            map.put(atomString, map.size());
        }

        {if ("" != null) return new Literal(map.get(atomString));}
    } else if (jj_2_43(2)) {
      jj_consume_token(LPAR);
      f = disjunction();
      jj_consume_token(RPAR);
{if ("" != null) return f;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CompOperator comp() throws ParseException {
    if (jj_2_44(2)) {
      jj_consume_token(GEQ);
{if ("" != null) return CompOperator.GEQ;}
    } else if (jj_2_45(2)) {
      jj_consume_token(GT);
{if ("" != null) return CompOperator.GT;}
    } else if (jj_2_46(2)) {
      jj_consume_token(LEQ);
{if ("" != null) return CompOperator.LEQ;}
    } else if (jj_2_47(2)) {
      jj_consume_token(LT);
{if ("" != null) return CompOperator.LT;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Match a quoted string.
 */
  final public String string() throws ParseException {StringBuilder builder = new StringBuilder();
    jj_consume_token(QUOTE);
    label_12:
    while (true) {
      if (jj_2_48(2)) {
        ;
      } else {
        break label_12;
      }
      getChar(builder);
    }
    jj_consume_token(ENDQUOTE);
{if ("" != null) return builder.toString();}
    throw new Error("Missing return statement in function");
  }

/**
 * Match char inside quoted string.
 */
  final public void getChar(StringBuilder builder) throws ParseException {Token t;
    if (jj_2_49(2)) {
      t = jj_consume_token(CHAR);
    } else if (jj_2_50(2)) {
      t = jj_consume_token(CNTRL_ESC);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
if (t.image.length() < 2)
    {
      // CHAR
      builder.append(t.image.charAt(0));
    }
    else if (t.image.length() < 6)
    {
      // ESC
      char c = t.image.charAt(1);
      switch (c)
      {
        case 'b': builder.append((char) 8); break;
        case 'f': builder.append((char) 12); break;
        case 'n': builder.append((char) 10); break;
        case 'r': builder.append((char) 13); break;
        case 't': builder.append((char) 9); break;
        default: builder.append(c);
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_scan_token(INF)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMIC)) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_scan_token(LEQ)) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_scan_token(GEQ)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_scan_token(LPAR)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(GUARANTEE)) return true;
    if (jj_scan_token(LCPAR)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_scan_token(SUP)) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(ASSUME)) return true;
    if (jj_scan_token(LCPAR)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_scan_token(LCPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_scan_token(LCPAR)) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(REQUIRE)) return true;
    if (jj_scan_token(LCPAR)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(PRESET)) return true;
    if (jj_scan_token(LCPAR)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(NEG)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(XOP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_scan_token(GOP)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(INITIALLY)) return true;
    if (jj_scan_token(LCPAR)) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(FOP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SEMIC)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(WOP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(VOP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(ROP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(UOP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SEMIC)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(BIIMP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(IMP)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(MOORE)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(MEALY)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(MOORESTRICT)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(MEALYSTRICT)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_scan_token(CNTRL_ESC)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(MOORE)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(MEALY)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[50];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 50; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
