/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package ltl.parser;
import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;
import ltl.*;
import ltl.tlsf.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;

/** Token Manager. */
@SuppressWarnings("unused")public class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x500200L) != 0L)
         {
            jjmatchedKind = 44;
            return 12;
         }
         if ((active0 & 0xaffc00L) != 0L)
         {
            jjmatchedKind = 44;
            return 32;
         }
         if ((active0 & 0x20000000L) != 0L)
            return 41;
         if ((active0 & 0x7d1000000L) != 0L)
            return 32;
         return -1;
      case 1:
         if ((active0 & 0x1affc00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 32;
         }
         if ((active0 & 0x500200L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
            return 11;
         }
         return -1;
      case 2:
         if ((active0 & 0x1fffe00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
            return 32;
         }
         return -1;
      case 3:
         if ((active0 & 0x1f7fc00L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
            return 32;
         }
         if ((active0 & 0x80200L) != 0L)
            return 32;
         return -1;
      case 4:
         if ((active0 & 0x1f03c00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 4;
            }
            return 32;
         }
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x78000L) != 0L)
            return 32;
         return -1;
      case 5:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x1603800L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
            return 32;
         }
         if ((active0 & 0x900000L) != 0L)
            return 32;
         return -1;
      case 6:
         if ((active0 & 0x401800L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 6;
            return 32;
         }
         if ((active0 & 0x1200000L) != 0L)
            return 32;
         return -1;
      case 7:
         if ((active0 & 0x401800L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 7;
            return 32;
         }
         return -1;
      case 8:
         if ((active0 & 0x1800L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 8;
            return 32;
         }
         if ((active0 & 0x400000L) != 0L)
            return 32;
         return -1;
      case 9:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 9;
            return 32;
         }
         return -1;
      case 10:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
            return 32;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 35);
      case 34:
         return jjStopAtPos(0, 45);
      case 40:
         return jjStopAtPos(0, 40);
      case 41:
         return jjStopAtPos(0, 41);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 59:
         return jjStopAtPos(0, 8);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 70:
         return jjStartNfaWithStates_0(0, 28, 32);
      case 71:
         return jjStartNfaWithStates_0(0, 29, 41);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x500200L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0xf8000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 82:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x6400L);
      case 85:
         return jjStartNfaWithStates_0(0, 31, 32);
      case 86:
         return jjStartNfaWithStates_0(0, 32, 32);
      case 87:
         return jjStartNfaWithStates_0(0, 34, 32);
      case 88:
         return jjStartNfaWithStates_0(0, 30, 32);
      case 123:
         return jjStopAtPos(0, 6);
      case 125:
         return jjStopAtPos(0, 7);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L);
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x86000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x1001800L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x500200L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 39);
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x480000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x200400L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x50000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 78:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 32);
         break;
      case 79:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 32);
         break;
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x804000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1100000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x28000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x802400L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x1400000L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(5, 14);
         break;
      case 44:
         return jjMoveStringLiteralDfa6_0(active0, 0x60000L);
      case 58:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 83:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 32);
         break;
      case 84:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 32);
         return jjMoveStringLiteralDfa6_0(active0, 0x203000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         break;
      case 69:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 32);
         break;
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 83:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 32);
         return jjMoveStringLiteralDfa7_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 83:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 89:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 22, 32);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(9, 12);
         break;
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(11, 11);
         break;
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(11, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(11, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 72;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
               case 32:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAdd(32); }
                  break;
               case 11:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAdd(32); }
                  break;
               case 3:
                  if (curChar == 48)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 49)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 38)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  break;
               case 41:
                  if ((0x3ff008000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAdd(32); }
                  break;
               case 0:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 5;
                  break;
               case 14:
               case 15:
                  if (curChar == 38 && kind > 36)
                     kind = 36;
                  break;
               case 16:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 24:
                  if (curChar == 49 && kind > 42)
                     kind = 42;
                  break;
               case 30:
                  if (curChar == 48 && kind > 43)
                     kind = 43;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     { jjCheckNAdd(32); }
                  }
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     { jjCheckNAdd(32); }
                  }
                  if (curChar == 86)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 3:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     { jjCheckNAdd(32); }
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 18;
                  if (curChar == 65)
                     { jjAddStates(0, 2); }
                  else if (curChar == 71)
                     { jjAddStates(3, 4); }
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 124)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 41:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     { jjCheckNAdd(32); }
                  }
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 49;
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 1:
                  { jjAddStates(5, 6); }
                  break;
               case 4:
                  if (curChar == 83 && kind > 25)
                     kind = 25;
                  break;
               case 5:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 17:
               case 18:
                  if (curChar == 124 && kind > 37)
                     kind = 37;
                  break;
               case 19:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101 && kind > 42)
                     kind = 42;
                  break;
               case 21:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 101 && kind > 43)
                     kind = 43;
                  break;
               case 26:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAdd(32); }
                  break;
               case 32:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  { jjCheckNAdd(32); }
                  break;
               case 33:
                  if (curChar == 71)
                     { jjAddStates(3, 4); }
                  break;
               case 34:
                  if (curChar == 69 && kind > 27)
                     kind = 27;
                  break;
               case 35:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 42:
                  if (curChar == 83 && kind > 27)
                     kind = 27;
                  break;
               case 43:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 65)
                     { jjAddStates(0, 2); }
                  break;
               case 52:
                  if (curChar == 84 && kind > 25)
                     kind = 25;
                  break;
               case 53:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 69 && kind > 26)
                     kind = 26;
                  break;
               case 58:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 83 && kind > 26)
                     kind = 26;
                  break;
               case 63:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(5, 6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 72 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x800400000000L & l) != 0L)
                     kind = 49;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x14404410000000L & l) != 0L)
                     kind = 49;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0){
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 92:
         return jjStopAtPos(0, 46);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                     kind = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 48)
                     kind = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   56, 61, 71, 41, 50, 1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\173", "\175", "\73", "\111\116\106\117", 
"\124\111\124\114\105\72", "\104\105\123\103\122\111\120\124\111\117\116\72", 
"\123\105\115\101\116\124\111\103\123\72", "\124\101\122\107\105\124\72", "\124\101\107\123\72\40", 
"\115\145\141\154\171", "\115\157\157\162\145", "\115\145\141\154\171\54\123\164\162\151\143\164", 
"\115\157\157\162\145\54\123\164\162\151\143\164", "\115\101\111\116", "\111\116\120\125\124\123", 
"\117\125\124\120\125\124\123", "\111\116\111\124\111\101\114\114\131", "\120\122\105\123\105\124", 
"\122\105\121\125\111\122\105", null, null, null, "\106", "\107", "\130", "\125", "\126", "\122", "\127", 
"\41", null, null, "\55\76", "\74\55\76", "\50", "\51", null, null, null, "\42", null, 
null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 72; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "STRING_STATE",
   "ESC_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 0, -1, 1, 
};
static final long[] jjtoToken = {
   0x3bfffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static final long[] jjtoMore = {
   0x400000000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[72];
    private final int[] jjstateSet = new int[2 * 72];

    
    protected char curChar;
}
