/*
 * Copyright (C) 2016  (See AUTHORS)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* LTLParser.java */
/* Generated By:JavaCC: Do not edit this line. LTLParser.java */
package ltl.parser;

import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;
import ltl.*;

@SuppressWarnings("ALL")
public class LTLParser implements LTLParserConstants {
    private static final int[] INTS = new int[0];
    private static int[] jj_la1_0;

    static {
        jj_la1_init_0();
    }

    private final int[] jj_la1;
    private final JJCalls[] jj_2_rtns = new JJCalls[15];
    private final LookaheadSuccess jj_ls = new LookaheadSuccess();

    public BiMap<String, Integer> map = HashBiMap.create();

    /**
     * Generated Token Manager.
     */
    public LTLParserTokenManager token_source;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    SimpleCharStream jj_input_stream;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    private boolean jj_rescan = false;
    private int jj_gc = 0;
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    /**
     * Constructor with InputStream.
     */
    public LTLParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public LTLParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new LTLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
        jj_la1 = INTS;
    }

    /**
     * Constructor.
     */
    public LTLParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream);
        token_source = new LTLParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
        jj_la1 = INTS;
    }

    /**
     * Constructor with generated Token Manager.
     */
    public LTLParser(LTLParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
        jj_la1 = INTS;
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{};
    }

    /**
     * Parse with new bijection between identifiers and atoms.
     */
    public Formula parse() throws ParseException {
        return formula();
    }

    public final Formula formula() throws ParseException {
        Formula f;
        f = disjunction();
        jj_consume_token(0);
        return f;
    }

    public final Formula disjunction() throws ParseException {
        Formula r;
        Formula result;
        result = conjunction();
        label_1:
        while (true) {
            if (jj_2_1(2)) {
            } else {
                break label_1;
            }
            jj_consume_token(OR);
            r = conjunction();
            result = Disjunction.create(result, r);
        }
        {
            return result;
        }
    }

    public final Formula conjunction() throws ParseException {
        Formula result;
        Formula r = null;
        result = until();
        label_2:
        while (true) {
            if (jj_2_2(2)) {
            } else {
                break label_2;
            }
            jj_consume_token(AND);
            r = until();
            result = Conjunction.create(result, r);
        }
        {
            if ("" != null) return result;
        }
        throw new Error("Missing return statement in function");
    }

    public final Formula until() throws ParseException {
        Formula result;
        Formula r = null;
        result = release();
        label_3:
        while (true) {
            if (jj_2_3(2)) {
            } else {
                break label_3;
            }
            jj_consume_token(UOP);
            r = release();
            result = UOperator.create(result, r);
        }
        {
            if ("" != null) return result;
        }
        throw new Error("Missing return statement in function");
    }

    public final Formula release() throws ParseException {
        Formula result;
        Formula r = null;
        result = releasewithv();
        label_4:
        while (true) {
            if (jj_2_4(2)) {
            } else {
                break label_4;
            }
            jj_consume_token(ROP);
            r = releasewithv();
            result = (UOperator.create(result.not(), r.not())).not();
        }
        {
            if ("" != null) return result;
        }
        throw new Error("Missing return statement in function");
    }

    public final Formula releasewithv() throws ParseException {
        Formula result;
        Formula r = null;
        result = weak();
        label_5:
        while (true) {
            if (jj_2_5(2)) {
            } else {
                break label_5;
            }
            jj_consume_token(VOP);
            r = weak();
            result = (UOperator.create(result.not(), r.not())).not();
        }
        {
            if ("" != null) return result;
        }
        throw new Error("Missing return statement in function");
    }

    public final Formula weak() throws ParseException {
        Formula result;
        Formula r = null;
        result = unaryOp();
        label_6:
        while (true) {
            if (jj_2_6(2)) {
            } else {
                break label_6;
            }
            jj_consume_token(WOP);
            r = unaryOp();
            result = Disjunction.create(new UOperator(result, r), new GOperator(result));
        }
        {
            if ("" != null) return result;
        }
        throw new Error("Missing return statement in function");
    }

    public final Formula unaryOp() throws ParseException {
        Formula f;
        if (jj_2_7(2)) {
            jj_consume_token(FOP);
            f = unaryOp();
            {
                return FOperator.create(f);
            }
        } else if (jj_2_8(2)) {
            jj_consume_token(GOP);
            f = unaryOp();
            {
                return GOperator.create(f);
            }
        } else if (jj_2_9(2)) {
            jj_consume_token(XOP);
            f = unaryOp();
            {
                return XOperator.create(f);
            }
        } else if (jj_2_10(2)) {
            jj_consume_token(NEG);
            f = unaryOp();
            {
                return f.not();
            }
        } else if (jj_2_11(2)) {
            f = atom();
            {
                return f;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    public final Formula atom() throws ParseException {
        String atomString;
        int id;
        Formula f;
        if (jj_2_12(2)) {
            jj_consume_token(TRUE);
            {
                if ("" != null) return BooleanConstant.TRUE;
            }
        } else if (jj_2_13(2)) {
            jj_consume_token(FALSE);
            {
                if ("" != null) return BooleanConstant.FALSE;
            }
        } else if (jj_2_14(2)) {
            atomString = jj_consume_token(ID).image;
            if (!map.containsKey(atomString)) {
                map.put(atomString, map.size());
            }

            {
                if ("" != null) return new Literal(map.get(atomString));
            }
        } else if (jj_2_15(2)) {
            jj_consume_token(LPAR);
            f = disjunction();
            jj_consume_token(RPAR);
            {
                if ("" != null) return f;
            }
        } else {
            jj_consume_token(-1);
            throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 0; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(LTLParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Get the next Token.
     */
    public final Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    public final Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[20];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 0; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 20; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq);
    }

    /**
     * Enable tracing.
     */
    public final void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    public final void disable_tracing() {
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_3R_14() {
        return jj_3R_7();
    }

    private boolean jj_3_6() {
        if (jj_scan_token(WOP)) return true;
        return jj_3R_12();
    }

    private boolean jj_3_13() {
        return jj_scan_token(FALSE);
    }

    private boolean jj_3R_11() {
        return jj_3R_12();
    }

    private boolean jj_3R_13() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_12()) {
            jj_scanpos = xsp;
            if (jj_3_13()) {
                jj_scanpos = xsp;
                if (jj_3_14()) {
                    jj_scanpos = xsp;
                    if (jj_3_15()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_12() {
        return jj_scan_token(TRUE);
    }

    private boolean jj_3_3() {
        if (jj_scan_token(UOP)) return true;
        return jj_3R_9();
    }

    private boolean jj_3R_8() {
        return jj_3R_9();
    }

    private boolean jj_3_5() {
        if (jj_scan_token(VOP)) return true;
        return jj_3R_11();
    }

    private boolean jj_3_11() {
        return jj_3R_13();
    }

    private boolean jj_3R_10() {
        return jj_3R_11();
    }

    private boolean jj_3_10() {
        if (jj_scan_token(NEG)) return true;
        return jj_3R_12();
    }

    private boolean jj_3_2() {
        if (jj_scan_token(AND)) return true;
        return jj_3R_8();
    }

    private boolean jj_3_9() {
        if (jj_scan_token(XOP)) return true;
        return jj_3R_12();
    }

    private boolean jj_3R_7() {
        return jj_3R_8();
    }

    private boolean jj_3_8() {
        if (jj_scan_token(GOP)) return true;
        return jj_3R_12();
    }

    private boolean jj_3R_12() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_7()) {
            jj_scanpos = xsp;
            if (jj_3_8()) {
                jj_scanpos = xsp;
                if (jj_3_9()) {
                    jj_scanpos = xsp;
                    if (jj_3_10()) {
                        jj_scanpos = xsp;
                        if (jj_3_11()) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_7() {
        if (jj_scan_token(FOP)) return true;
        return jj_3R_12();
    }

    private boolean jj_3_4() {
        if (jj_scan_token(ROP)) return true;
        return jj_3R_10();
    }

    private boolean jj_3_15() {
        if (jj_scan_token(LPAR)) return true;
        return jj_3R_14();
    }

    private boolean jj_3R_9() {
        return jj_3R_10();
    }

    private boolean jj_3_1() {
        if (jj_scan_token(OR)) return true;
        return jj_3R_7();
    }

    private boolean jj_3_14() {
        return jj_scan_token(ID);
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 15; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    @SuppressWarnings("serial")
    private static final class LookaheadSuccess extends java.lang.Error {
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
